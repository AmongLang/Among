among: BR* (topLevel BR*)* EOF

topLevel: ( "macro" BR* macroDefinition
          | ( "operator" | "keyword" ) BR* operatorDefinition
          | "undef" BR* undef
          | "use" "public"? ( value | complexPrimitive )
          | "fn" BR* macroDefinition ) stmtEnd
        | ( nameable | complexPrimitive) stmtEnd?

stmtEnd: "," | BR+ ","? | EOF

macroDefinition: macroName BR*
                 ( "{" BR* macroParam? BR* "}" BR*
                 | "(" BR* macroParam? BR* ")" BR*
                 | "[" BR* macroParam? BR* "]" BR* )?
                 ":" BR* expr
macroParam: paramName ( BR* "=" BR* expr )? ( BR* "," BR* macroParam? )?

operatorDefinition: word BR*
                    "as" BR* operatorProperties BR*
                    ( "and" BR* operatorProperties BR* )*
                    ( ":" BR* value )?

operatorProperties: ( operatorProperty BR* )+ ( "(" BR* value BR* ")"  # number expected
operatorProperty: "binary"
                | "prefix"
                | "postfix"
                | "left-associative"
                | "right-associative"
                | "accessor"

undef: "macro" BR* value
       ( "{" BR* "}"
       | "[" BR* "]"
       | "(" BR* ")" )?
     | ( "operator" | "keyword" ) BR* word
     | "use" value
     | "all" BR* ( "macros" | "operators" )

expr: nameable | complexPrimitive | value

nameable: ( value | complexPrimitive )?
          ( "{" BR* obj? BR* "}"
          | "[" BR* list? BR* "]"
          | "(" BR* oper? BR* ")" )

obj: key BR* ":" expr (  ( BR+ | BR* "," BR* ) obj? )?
list: expr ( ( BR+ | BR* "," BR* ) list? )?
oper: operExpr ( BR* "," BR* operExpr? )?

# OPERATORS

operExpr: primary # defined by script

primary: operNameable | number | word

operNameable: ( word BR* )?
          ( "{" BR* obj? BR* "}"
          | "[" BR* list? BR* "]"
          | "(" BR* oper? BR* ")" )

# LEXER

word: simpleWord | complexPrimitive
key: simpleKey | complexPrimitive
value: simpleValue | complexPrimitive
paramName: regex; ^[\s:,{}\[\]()=]+  # kek
macroName: simpleMacroName | complexPrimitive

plainWord: regex; [^\s:,{}\[\]()]+  # used in plain keywords, such as 'macro' 'as' 'operator' and such

simpleWord: regex; [^\s,{}\[\]()]+  # one-word letter
simpleKey: regex; [^:,{}\r\n]+
simpleValue: regex; ^[^"'][^,{}\[\]()\r\n]*
simpleMacroName: regex; ^[^"':][^:,{}\[\]()\r\n]*  # simpleValue that disallows use of ':'

complexPrimitive: ""\"" ( BR ( "\s"* "|" )? | ^( BR | "\"" ) )* "\""
                | "'" ( BR ( "\s"* "|" )? | ^( BR | "'" ) )* "'"
number: regex; [+-]?[0-9]+(\.[0-9]+)?

BR: regex; \r \n? | \n